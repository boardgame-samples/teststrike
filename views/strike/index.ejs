<!DOCTYPE html>
<html>

<head>
  <link rel='stylesheet' href='/stylesheets/style-strike.css' />
  <!-- 
  <link href="https://fonts.googleapis.com/css2?family=Zen+Maru+Gothic:wght@700&display=swap" rel="stylesheet">
  -->
</head>

<body text="white" class="bgimage">

  <audio id="audio">
    <source src="sounds/turn.mp3" type="audio/mp3">
  </audio>




  <div class=myname>
    <span id="myname">
      <%=login.name%>
    </span>
  </div>

  <div id="wincontainer" class="wincontainer none">
    <div id="winmessage" class="winmessage">
      <span id="winplayer"></span>の勝利。<br>Congratulations!
    </div>
  </div>


  <div id="startarea">
    <div class="gap"></div>
    <div class="message startmsg">
      <p>現在<span class="participant" id="pn">
          <%= playerlist.length %>
        </span>人<span id="participant"></span>が参加中です</p>
      <p>全員が参加後にSTARTしてください</p>
      <p><span id="max"></span></p>
    </div>
    <table class="join">
      <tr>
        <td>
          <button id="joinbtn" class="joinbtn">JOIN</button>
        </td>
        <td>
          <button id="exitbtn" class="joinbtn">EXIT</button>
        </td>

      </tr>
    </table>

    <div class="gap2"></div>

    <div class="gamestart">
      <button id="startbtn" class="startbtn">GAME START</button>
    </div>

    <div class="gap3"></div>
    <p class="rule">-ルール-</p>
    <div class="gap2"></div>
    <ul class="rulelist">
      <li>自分のターンに所持しているダイスを一個フィールドに投げる。</li>
      <li>ダイスがフィールドから飛び出た時、もしくはダイスの目が1の時にダイスはフィールドから取り除かれる。</li>
      <li>１以外の数字の出目が２個以上出た時、それらのダイスを全て獲得する。</li>
      <li>一度投げた後は、もう一度ターンを続けるか終了するかを選択できる。</li>
      <li>ダイスを持っているプレイヤーが一人だけになった時、その残ったプレイヤーが勝者となる。</li>
      <li>フィールド上のダイスが無くなった時、次のプレイヤーは所持するダイスを全て振らなければならない。</li>
    </ul>


  </div>


  <div id="boardarea" class="none">

    <table class="playerinfo" id="playerinfo">
      <tr class="playertr" id="playertr">
      </tr>
    </table>

    <div class="gap2"></div>

    <div id="pointerCS">

      <table class="message">
        <tr>
          <td><span id="message_text" class="message_text">Now loading.....</span></td>
        </tr>
        <tr>
          <td class="continue_stop"><span class="enable_underline" id="continue"></span><span id="or"></span><span
              class="enable_underline" id="stop"></span></td>
        </tr>
      </table>

    </div>

    <div class="gap"></div>
    <div id="pointer">
      <div id="canvascontainer" class="canvascontainer">
        <canvas id="canvas" width="1000px" height="1000px">
          <img id="background" style="display:none" />
        </canvas>
      </div>
    </div>
    <div class="gap2"></div>
    <div>
      <p class="boardinfo" id="boardinfo"></p>
    </div>

  </div>




  <div class="bottomlink">

    <div class="reset-button">
      <form method="post" action="/strike/reset">
        <input class="resetinput" name="reset" id="reset" value="Game Reset" type="submit" />
      </form>
    </div>
    <div id="retry" class="retry pointer_none" onclick="Retry()">Retry</div>
    <div class="mute_btn" onClick="mute()">Unmute/Mute</div>


  </div>
  <a class="linktext underline" href="/">&lt;&lt; Topへ戻る</a>

  <script src="/socket.io/socket.io.js"></script>

  <script>
    var touchstate = 0;
    var move_animation = 0;
    let timerId

    class board_dice {
      constructor(value, current, rotate) {
        this.value = value
        this.current = current
        this.rotate = rotate
        this.move = 0
        this.next = []
        this.vector = []
      }
    }

    /////////////////////////////////////////////////////////////////////
    //STARTクリック
    var startbtn = document.getElementById('startbtn');

    startbtn.addEventListener('click', function () {

      socket.emit("start", '');
      console.log('クリックされました！');

    }, false);

    //JOINクリック
    var joinbtn = document.getElementById('joinbtn');
    joinbtn.addEventListener('click', function () {

      var myname = document.getElementById("myname").textContent
      var msg = {
        myname: myname
      }
      socket.emit("join", msg);
      console.log('クリックされました！');

    }, false);


    //EXITクリック
    var exitbtn = document.getElementById('exitbtn');
    exitbtn.addEventListener('click', function () {

      var myname = document.getElementById("myname").textContent
      var msg = {
        myname: myname
      }
      socket.emit("exit", msg);
      console.log('クリックされました！');

    }, false);

    //RETRYクリック
    function Retry() {
      socket.emit("retry", '');
      ;
    }


    /////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////////////////////
    // muteの切り替え
    function mute() {
      if (document.getElementById('audio').muted) {
        document.getElementById('audio').muted = false;
      } else {
        document.getElementById('audio').muted = true;
      }
    }


    /////////////////////////////////////////////////////////////////////
    function Display(data) {
      document.getElementById('audio').muted = true;
      var myname = document.getElementById("myname").textContent
      var pn = document.getElementById('pn');
      var plist = data.playerlist;
      plength = data.playerlist.length;
      pn.textContent = plength;
      ;
      var participant = document.getElementById('participant');
      var J = document.getElementById("joinbtn")
      var E = document.getElementById("exitbtn")

      console.log(myname)
      console.log(typeof (myname))

      //つぎに、joinが白文字exitが黒文字になる設定。
      if (data.word == "join") {
        participant.innerHTML = '(<span class="participant">' + data.playerlist + '</span>)'

        //自分の名前がまだ登録してない　playerlistにないとき
        if (plist.includes(myname)) {
          J.classList.add("textwhite")
          E.classList.remove("textwhite")
          console.log('test' + myname)
        }

      } else if (data.word == "exit") {
        if (plength != 0) {
          participant.innerHTML = '(<span class="participant">' + data.playerlist + '</span>)'
        } else {
          participant.innerHTML = ""
        }

        if (plist.includes(myname)) {
          ;
        } else {
          E.classList.add("textwhite")
          J.classList.remove("textwhite")
        }
      }
    }

    /////////////////////////////////////////////////////////////////////
    function Renew(data) {

      touchstate = 0
      var barea = document.getElementById('boardarea')
      var sarea = document.getElementById('startarea')
      var board_dices = data.board_dices
      var players = data.players
      var actionstate = data.actionstate
      var turn = data.turn
      var playercount = data.playercount
      var order = Math.floor(turn % playercount)
      var winner = data.winner
      var sound_count = data.sound_count
      var retry_count = data.retry_count
      var gamestate = data.gamestate


      var canvas = document.getElementById("canvas")
      barea.classList.remove("none")
      sarea.classList.add("none")

      var myname = document.getElementById("myname").textContent
      var pointer = document.getElementById("pointer")
      var pointerCS = document.getElementById("pointerCS")
      var retryarea = document.getElementById("retry")

      if (actionstate != 3) {
        var wc = document.getElementById('wincontainer')
        wc.classList.add("none")
      }


      var boardinfo = document.getElementById("boardinfo")
      var boardlist = []
      for (var i in board_dices) {
        boardlist.push(board_dices[i].value)
      }

      if (boardlist.length == 0) {
        boardinfo.textContent = ""
      } else {
        boardinfo.textContent = "field dice:" + boardlist;
      }

      //retryボタンは、gamestate が1の時のみ有効。
      if(gamestate == 0){
        retryarea.classList.add("pointer_none")
        retryarea.classList.remove("pointer_auto")
      }else if(gamestate == 1){
        retryarea.classList.add("pointer_auto")
        retryarea.classList.remove("pointer_none")
      }
      
      if (actionstate == 0) {
        if (players[order].name == myname) {
          if (sound_count == 0) {
            document.getElementById('audio').play();
          }


          //pointer有効にする
          pointer.classList.add("pointer_auto")
          pointer.classList.remove("pointer_none")
          //pointerCSは無効にする
          pointerCS.classList.add("pointer_none")
          pointerCS.classList.remove("pointer_auto")

        } else {
          //pointerは無効にする
          pointer.classList.add("pointer_none")
          pointer.classList.remove("pointer_auto")
          //pointerCSは無効にする
          pointerCS.classList.add("pointer_none")
          pointerCS.classList.remove("pointer_auto")
        }
      } else if (actionstate == 1) {
        if (players[order].name == myname) {
          //pointer無効にする
          pointer.classList.add("pointer_none")
          pointer.classList.remove("pointer_auto")
          //pointerCSは有効にする
          pointerCS.classList.add("pointer_auto")
          pointerCS.classList.remove("pointer_none")

        } else {
          //pointerは無効にする
          pointer.classList.add("pointer_none")
          pointer.classList.remove("pointer_auto")
          //pointerCSは無効にする
          pointerCS.classList.add("pointer_none")
          pointerCS.classList.remove("pointer_auto")
        }
      } else if (actionstate == 2 || actionstate == 3) {
        //pointerは無効にする
        pointer.classList.add("pointer_none")
        pointer.classList.remove("pointer_auto")
        //pointerCSは無効にする
        pointerCS.classList.add("pointer_none")
        pointerCS.classList.remove("pointer_auto")
      }


      /////player information
      //毎回、更新する。
      var namestate = data.namestate
      var playerlist = data.playerlist

      //playerlist から、name　情報テーブルの追加
      var playertr = document.getElementById("playertr")
      playertr.innerHTML = ""
      for (var i in playerlist) {
        var td = document.createElement("td")


        if (playerlist[i] == myname) {
          td.innerHTML = "<p>" + "◆" + playerlist[i] + "</p>" + "<p>Dice:"
            + players[i].dice_number + "</p>"
            ;
        } else {
          td.innerHTML = "<p>" + playerlist[i] + "</p>" + "<p>Dice:"
            + players[i].dice_number + "</p>"
        }


        if (players[i].dice_number < 1) {
          if (order == i) {
            td.className = "playertd_dead turnplayer"
          } else {
            td.className = "playertd_dead"
          }
        } else {
          if (order == i) {
            td.className = "playertd turnplayer"
          } else {
            td.className = "playertd"
          }
        }

        playertr.appendChild(td);
      }

      //table messageの更新 
      var message_text = document.getElementById('message_text')
      var text_continue = document.getElementById('continue')
      var text_or = document.getElementById('or')
      var text_stop = document.getElementById('stop')
      if (actionstate == 0) {

        if (players[order].name == myname) {
          message_text.innerHTML = 'あなたのターン<br>エリア内でダイスを振ってください。'
        } else {
          message_text.innerHTML = playerlist[order] + 'がプレイ中。待機。'
        }
        text_continue.textContent = ''
        text_or.textContent = ''
        text_stop.textContent = ''
          ;
      } else if (actionstate == 1) {

        text_continue.onclick = Continue;
        text_stop.onclick = Stop;

        if (players[order].name == myname) {
          message_text.innerHTML = 'あなたのターン'
          text_continue.innerHTML = 'CONTINUE'
          text_or.innerHTML = '&nbsp;&nbsp;or&nbsp;&nbsp;'
          text_stop.innerHTML = 'STOP'
        } else {
          message_text.innerHTML = playerlist[order] + 'がプレイ中。待機。'
          text_continue.textContent = ''
          text_or.textContent = ''
          text_stop.textContent = ''
        }
        ;
      } else if (actionstate == 2) {

        if (players[order].name == myname) {
          message_text.innerHTML = 'あなたのターン<br>あなたはゲームを脱落しました。'
        } else {
          message_text.innerHTML = playerlist[order] + 'がゲームを脱落しました。'
        }
        text_continue.textContent = ''
        text_or.textContent = ''
        text_stop.textContent = ''

      } else if (actionstate == 3) {
        message_text.innerHTML = 'ゲームが終了しました。'
        text_continue.textContent = ''
        text_or.textContent = ''
        text_stop.textContent = ''
          ;
        //このあと、下でポップアップを表示する。あなたor～の勝利。Congratulations!
        var wn = document.getElementById('winmessage')
        wn.classList.remove("none")

      }



      ctx = canvas.getContext("2d");
      ctx.clearRect(0, 0, 1000, 1000)
      /*      ctx.fillStyle = "#ffffff";
            ctx.beginPath();
            ctx.arc(500, 500, 400, 0, 2 * Math.PI);
            ctx.closePath();
            ctx.fill();  */

      for (var i in board_dices) {

        var x = board_dices[i].current[0]
        var y = board_dices[i].current[1]
        var z = board_dices[i].value
        var r = board_dices[i].rotate

        ctx.translate(x, y);
        ctx.rotate(r * Math.PI / 180);
        ctx.translate(-x, -y);

        //ctx.fillStyle = "#ffffff";
        //ctx.fillRect(x - 50, y - 50, 100, 100);
        //ctx.strokeRect(x - 50, y - 50, 100, 100);
        //fillRect, strokeRectの代わりにRoundRect(a,b,c,d)を使う。
        RoundRect(x - 50, y - 50, 100, 100, 15)

        ctx.fillStyle = "#111111";
        Draw_dice(x, y, z)
        ctx.translate(x, y);
        ctx.rotate(-r * Math.PI / 180);
        ctx.translate(-x, -y);

      }




      if (players[order].name == myname && actionstate == 0 && actionstate != 2) {

        let cnt = 0
        var CC = document.getElementById('canvascontainer')

        timerId = setInterval(function () {
          if (cnt % 2 == 0) {
            CC.classList.add("canvasboarder")
            CC.classList.remove("canvascontainer")
          } else {
            CC.classList.add("canvascontainer")
            CC.classList.remove("canvasboarder")
          }
          if (touchstate == 1) {
            CC.classList.add("canvascontainer")
            CC.classList.remove("canvasboarder")
            clearInterval(timerId);
          }

          cnt++
        }, 600);
      } else if (actionstate == 2) {
        setTimeout(function () {
          Stop()
        }, 3000)
      } else if (actionstate == 3) {
        var wp = document.getElementById('winplayer')
        var wc = document.getElementById('wincontainer')
        wc.classList.remove('none')

        if (winner == myname) {
          wp.textContent = 'あなた'
        } else {
          wp.textContent = winner
        }
      }

    }

    /////////////////////////////////////////////////////////////////////
    function RoundRect(a, b, c, d, r) {
      ctx.beginPath();
      ctx.moveTo(a + r, b)
      ctx.arcTo(a + c, b, a + c, b + r, r)
      ctx.arcTo(a + c, b + d, a + c - r, b + d, r)
      ctx.arcTo(a, b + d, a, b + d - r, r)
      ctx.arcTo(a, b, a + r, b, r)
      ctx.fillStyle = "#ffffff";
      ctx.fill();
      ctx.strokeStyle = "#111111";
      ctx.lineWidth = 4
      ctx.stroke();
      ;
    }

    /////////////////////////////////////////////////////////////////////
    function Continue() {
      console.log('continueが押されました')
      socket.emit("continue", '');
      var pointerCS = document.getElementById("pointer")
      pointerCS.classList.add("pointer_none")
      pointerCS.classList.remove("pointer_auto")
    }

    function Stop() {
      console.log('stopが押されました')
      socket.emit("stop", '');
      var pointerCS = document.getElementById("pointer")
      pointerCS.classList.add("pointer_none")
      pointerCS.classList.remove("pointer_auto")
    }

    /////////////////////////////////////////////////////////////////////
    function Move(data) {
      var board_dices = data.board_dices
      var players = data.players
      var canvas = document.getElementById("canvas")
      var move_dice = data.move_dice
      var count = 0
      var board_length = data.board_length
      var turn = data.turn
      var playercount = data.playercount
      var order = Math.floor(turn % playercount)

      var myname = document.getElementById("myname").textContent

      /////player information_ moveの前に、毎回player情報更新
      var playerlist = data.playerlist

      //playerlist から、name　情報テーブルの追加
      var playertr = document.getElementById("playertr")
      playertr.innerHTML = ""
      for (var i in playerlist) {
        var td = document.createElement("td")

        if (playerlist[i] == myname) {
          td.innerHTML = "<p>" + "◆" + playerlist[i] + "</p>" + "<p>Dice:"
            + players[i].dice_number + "</p>"
            ;
        } else {
          td.innerHTML = "<p>" + playerlist[i] + "</p>" + "<p>Dice:"
            + players[i].dice_number + "</p>"
        }

        if (players[i].dice_number < 1) {
          if (order == i) {
            td.className = "playertd_dead turnplayer"
          } else {
            td.className = "playertd_dead"
          }
        } else {
          if (order == i) {
            td.className = "playertd turnplayer"
          } else {
            td.className = "playertd"
          }
        }
        playertr.appendChild(td);
      }


      ctx = canvas.getContext("2d");

      function loop(timestamp) {
        /////////////////move_diceのアニメーション処理///////////////
        if (count % 5 == 0 && count < 95) {
          ctx.clearRect(0, 0, 1000, 1000)



          /*      ctx.fillStyle = "#ffffff";
      ctx.beginPath();
      ctx.arc(500, 500, 400, 0, 2 * Math.PI);
      ctx.closePath();
      ctx.fill();  */
          if (board_length == 1) {

            for (var i in board_dices) {

              var x = board_dices[i].current[0]
              var y = board_dices[i].current[1]
              var z = board_dices[i].value
              var r = board_dices[i].rotate

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50, y - 50, 100, 100);
              //ctx.strokeRect(x - 50, y - 50, 100, 100);
              RoundRect(x - 50, y - 50, 100, 100, 15)


              ctx.fillStyle = "#111111";

              Draw_dice(x, y, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);
            }
          }

          if (count < 90) {
            var z = Math.floor(Math.random() * 6) + 1;
          } else {
            var z = move_dice.value
          }

          var r = 9 * (Math.floor(Math.random() * 10) + 1);
          var x = move_dice.origin[0]
          var y = move_dice.origin[1]
          //-20~+20まで
          var randomX = Math.floor(Math.random() * 40 + 1) - 20
          var randomY = Math.floor(Math.random() * 40 + 1) - 20

          ctx.translate(x, y);
          ctx.rotate(r * Math.PI / 180);
          ctx.translate(-x, -y);

          //ctx.fillStyle = "#ffffff";
          //ctx.fillRect(x - 50 + randomX, y - 50 + randomY, 100, 100);
          //ctx.strokeRect(x - 50 + randomX, y - 50 + randomY, 100, 100);
          RoundRect(x - 50 + randomX, y - 50 + randomY, 100, 100, 15)


          ctx.fillStyle = "#111111";

          Draw_dice(x + randomX, y + randomY, z)
          ctx.translate(x, y);
          ctx.rotate(-r * Math.PI / 180);
          ctx.translate(-x, -y);

          move_dice.origin[0] += move_dice.vector[0] / 20
          move_dice.origin[1] += move_dice.vector[1] / 20
        }

        /////////////////board_dicesのアニメーション処理///////////////
        else if (count % 5 == 0 && count >= 95 && count < 145) {
          ctx.clearRect(0, 0, 1000, 1000)


          /*      ctx.fillStyle = "#ffffff";
      ctx.beginPath();
      ctx.arc(500, 500, 400, 0, 2 * Math.PI);
      ctx.closePath();
      ctx.fill();  */

          for (var i in board_dices) {
            if (board_dices[i].move == 0) {

              var x = board_dices[i].current[0]
              var y = board_dices[i].current[1]
              var z = board_dices[i].value
              var r = board_dices[i].rotate

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50, y - 50, 100, 100);
              //ctx.strokeRect(x - 50, y - 50, 100, 100);
              RoundRect(x - 50, y - 50, 100, 100, 15)

              ctx.fillStyle = "#111111";

              Draw_dice(x, y, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);

            } else if (board_dices[i].move == 1) {

              if (count < 140) {
                var z = Math.floor(Math.random() * 6) + 1;
                var r = 9 * (Math.floor(Math.random() * 10) + 1);
                //-20~+20まで
                var randomX = Math.floor(Math.random() * 40 + 1) - 20
                var randomY = Math.floor(Math.random() * 40 + 1) - 20
              } else {
                var z = board_dices[i].nextvalue
                var r = board_dices[i].rotate
                var randomX = 0
                var randomY = 0
              }

              var x = board_dices[i].current[0]
              var y = board_dices[i].current[1]

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50 + randomX, y - 50 + randomY, 100, 100);
              //ctx.strokeRect(x - 50 + randomX, y - 50 + randomY, 100, 100);
              RoundRect(x - 50 + randomX, y - 50 + randomY, 100, 100, 15)

              ctx.fillStyle = "#111111";

              Draw_dice(x + randomX, y + randomY, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);

              board_dices[i].current[0] += board_dices[i].vector[0] / 10
              board_dices[i].current[1] += board_dices[i].vector[1] / 10

            }
          }
        }

        /////////////////２つのアニメーション終わったらリターン///////////////
        else if (count >= 145) {
          move_animation = 1;
          return;
        }

        if (count == 94) {
          const bd = new board_dice(move_dice.value, move_dice.current, move_dice.rotate)
          board_dices.push(bd)
        }

        count += 1;
        window.requestAnimationFrame((ts) => loop(ts));
      }
      window.requestAnimationFrame((ts) => loop(ts));
    }



    /////////////////////////////////////////////////////////////////////
    function Add_Delete(data) {
      //var barea = document.getElementById('boardarea')
      //var sarea = document.getElementById('startarea')
      var board_dices = data.board_dices;
      var delete_dices = data.delete_dices;
      var add_dices = data.add_dices;
      var count2 = 0

      var canvas = document.getElementById("canvas")
      // barea.classList.remove("none")
      // sarea.classList.add("none")
      ctx = canvas.getContext("2d");

      //////////0.5秒ごとにadd_dices, delete_dicesのみを2.5秒表示、非表示する。
      function loop(timestamp) {
        ///////ここからループ処理を記入, 20countごとに更新。
        if (count2 % 20 == 0 && count2 < 130) {

          ctx.clearRect(0, 0, 1000, 1000)

          /*      ctx.fillStyle = "#ffffff";
      ctx.beginPath();
      ctx.arc(500, 500, 400, 0, 2 * Math.PI);
      ctx.closePath();
      ctx.fill();  */
          if ((count2 / 20) % 4 != 1) {
            for (var i in board_dices) {
              var x = board_dices[i].current[0]
              var y = board_dices[i].current[1]
              var z = board_dices[i].value;
              var r = board_dices[i].rotate

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50, y - 50, 100, 100);
              //ctx.strokeRect(x - 50, y - 50, 100, 100);
              RoundRect(x - 50, y - 50, 100, 100, 15)

              ctx.fillStyle = "#111111";

              Draw_dice(x, y, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);
            }
          }

          if ((count2 / 20) % 2 == 1) {
            ///////////add, deleteを表示
            for (var i in delete_dices) {

              var x = delete_dices[i].current[0]
              var y = delete_dices[i].current[1]
              var z = delete_dices[i].value;
              var r = delete_dices[i].rotate

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50, y - 50, 100, 100);
              //ctx.strokeRect(x - 50, y - 50, 100, 100);
              RoundRect(x - 50, y - 50, 100, 100, 15)

              ctx.fillStyle = "#ff0000";

              Draw_dice(x, y, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);
            }

            for (var i in add_dices) {
              var x = add_dices[i].current[0]
              var y = add_dices[i].current[1]
              var z = add_dices[i].value;
              var r = add_dices[i].rotate

              ctx.translate(x, y);
              ctx.rotate(r * Math.PI / 180);
              ctx.translate(-x, -y);

              //ctx.fillStyle = "#ffffff";
              //ctx.fillRect(x - 50, y - 50, 100, 100);
              //ctx.strokeRect(x - 50, y - 50, 100, 100);
              RoundRect(x - 50, y - 50, 100, 100, 15)

              ctx.fillStyle = "#0067c0";
              Draw_dice(x, y, z)
              ctx.translate(x, y);
              ctx.rotate(-r * Math.PI / 180);
              ctx.translate(-x, -y);
            }
          }


        } else if (count2 >= 130) {
          Renew(data);
          return;
        }


        count2 += 1;
        window.requestAnimationFrame((ts) => loop(ts));
      }
      window.requestAnimationFrame((ts) => loop(ts));
    }



    /////////////////////////////////////////////////////////////////////
    function Draw_dice(x, y, z) {

      ctx.beginPath();

      switch (z) {
        case 1:
          /*ctx.arc(x + 25, y + 25, 5, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill(); */
          ctx.strokeStyle = "red"
          ctx.lineWidth = 8;
          ctx.moveTo(x - 25, y - 25);
          ctx.lineTo(x + 25, y + 25);
          ctx.stroke();
          ctx.moveTo(x - 25, y + 25);
          ctx.lineTo(x + 25, y - 25);
          ctx.stroke();
          break;
        case 2:
          ctx.arc(x - 20, y - 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y + 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          break;
        case 3:
          ctx.arc(x, y, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 25, y - 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 25, y + 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          break;
        case 4:
          ctx.arc(x - 20, y - 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y + 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 20, y + 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y - 20, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          break;
        case 5:
          ctx.arc(x, y, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 25, y - 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 25, y + 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 25, y + 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 25, y - 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();

          break;
        case 6:
          ctx.arc(x - 20, y - 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y - 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 20, y, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x - 20, y + 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          ctx.arc(x + 20, y + 25, 10, 0, 2 * Math.PI);
          ctx.closePath();
          ctx.fill();
          break;
      }
    }


    window.addEventListener("load", () => {
      const cc = document.getElementById("canvascontainer")
      let touch_start
      let start_time
      let touch_end
      let end_time


      cc.addEventListener("touchstart", function (e) {
        // 端末のデフォルト動作をキャンセル
        e.preventDefault();

        // タッチ開始情報を取得
        const touches = e.touches;
        const offset = this.getBoundingClientRect();

        const p = Math.floor(touches[0].pageX - offset.left);   // x座標
        const q = Math.floor(touches[0].pageY - offset.top);    // y座標
        touch_start = [p, q]
        start_time = Date.now();

        //        testbox.innerHTML =  touch_start + ":" + start_time;
        //        socket.emit("touchstart", touchValue); 
      });


      cc.addEventListener("touchend", function (e) {
        // 端末のデフォルト動作をキャンセル
        e.preventDefault();

        // タッチ終了情報を取得
        const touchesE = e.changedTouches;

        // ページ上のオフセット位置取得
        const offset = this.getBoundingClientRect();

        const s = Math.floor(touchesE[0].pageX - offset.left);   // x座標
        const t = Math.floor(touchesE[0].pageY - offset.top);    // y座標
        touch_end = [s, t];
        end_time = Date.now();
        //       testbox.innerHTML =  touch_end + ":" + end_time;
        var distance_s = Math.sqrt((500 - touch_start[0]) ** 2 + (500 - touch_start[1]) ** 2)
        var distance_e = Math.sqrt((500 - touch_end[0]) ** 2 + (500 - touch_end[1]) ** 2)
        var diff = end_time - start_time

        if (distance_s > 400 && distance_e < 400) {
          console.log('start' + distance_s)
          console.log('end' + distance_e)

          msg = {
            touch_start: touch_start,
            touch_end: touch_end,
            diff: diff
          }
          touchstate = 1
          socket.emit("touchinfo", msg);

          var pointer = document.getElementById("pointer")
          pointer.classList.add("pointer_none")
          pointer.classList.remove("pointer_auto")
        }


        touch_start = []
        touch_end = []
      });


    });



    /////////////////////////////////////////////////////////////////////
    const socket = io();
    socket.on("renew", (data) => {
      Renew(data);
      ;
    }
    );

    socket.on("retry", (data) => {
      var CC = document.getElementById('canvascontainer')
      CC.classList.add("canvascontainer")
      CC.classList.remove("canvasboarder")
      clearInterval(timerId);
    }
    );



    socket.on("move", (data) => {
      Move(data);
    }
    );

    socket.on("Add_Delete", (data) => {

      let timerid = window.setInterval(function () {
        console.log('前処理待ち')
        if (move_animation == 1) {
          console.log('処理が行われた')
          move_animation = 0
          Add_Delete(data);
          window.clearInterval(timerid)
        }
      }, 200)

    }
    );

    socket.on("startrenew", (data) => {
      Display(data);
    });

    socket.on("max", () => {
      var max = document.getElementById("max")
      max.innerHTML = "※PLAYできるのは4人までです"
        ;
    });

    socket.on("reset", () => {

      alert('RESETしました')
      window.location.href = '/strike'

    });


  </script>


</body>

</html>